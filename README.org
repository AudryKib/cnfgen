#+TITLE: Documentation of =cnfgen= formulas generator.
#+LANGUAGE:    en
#+OPTIONS:     H:2 num:nil toc:nil \n:nil @:t ::t |:t ^:t f:t TeX:t


* Generator of propositional formulas in CNF form

  Tool =cnfgen= is CNF formulas generator (i.e. propositional
  formulas in conjunctive normal form).

** What is a CNF?

   A propositional formula a  representation of a function oven ${0,1}$
   variables. Consider such a variable  $x$, then $\neg x$ is a formula
   which  has  value $1-x$.  This  is  called  the /negation/  of  $x$.
   Expressions of the form $x$  and $\neg x$ are called \literals/, and
   a /clause/ is a disjunction
   $$
   l_1 \vee l_2 \vee \ldots \vee l_k
   $$
   where each $l_i$ is a literal. A clause evaluates to one if and only
   if *at  least* one of the  literals evaluates to  one. Otherwise the
   clause evaluates to zero.
   A CNF is a conjunction of clauses
   $$
   C_1 \vee C_2 \vee \ldots \vee C_m
   $$
   and the CNF evaluates to one if *all* clauses evaluates to one.

   To *falsify* a  formula we need to find a value  of inputs for which
   the formula evaluates  to $0$. In order to  *satisfy* the formula we
   need an  input to make it evaluate  to 1. Observe that  to falsify a
   CNF it is sufficient to pick  a clause and set the variables in such
   a way that all literals in the clause evaluate to zero. No efficient
   way it  is known, in general,  to discover whether a  formula in CNF
   form has a satisfying input or not.

** Target for the sofware

   Anyone can use this software of  course! But the main target is the
   community of  SAT solver  programmers, who may  want top  test they
   solvers on canonical families  of formulas. Another community which
   may be interested is the  one of proof complexity researcher, which
   are interested  in the computational  complexity of proving  that a
   CNF formula is unsatisfiable.


** DIMACS encoding of CNFs

   The program outputs CNF  formulas encoded in /dimacs/ format, which
   is a very simple format which can be parse easily with =scanf= from
   the standard C library. Basically has the following structure:

   The  first line  specifies how  many  variables and how  many
   clauses are  in the  CNF formulas. The  next lines are  sequence of
   non zero integers followed by zero.
   : p cnf <N> <M>
   : <i> <i> <i> <i> 0
   : <i> <i> <i> 0
   : ...
   Each  line except  for the  first one  represents a  clause  in the
   following way:   a positive number  $t$ is the positive  literal on
   the  variable indexed  by $t$.  A  negative number  is the  negated
   literal  on the  variable  indexed  by $-t$.   For  example if  the
   formula is  defined on $n$  variables $x_1, x_2, \ldots,  x_n$ then
   the line =3 -1 5 6 -4 0= encodes clause $x_3 \vee \neg x_1 \vee x_5
   \vee x_6 \vee \neg x_4$.


** Requirements

   =cnfgen= requires  either Python  2.7 *or* the  =argparse= library,
   which is included in the standard Python library since version 2.7.

   Optionals requirements are

   - =networkx= library, which is used to parse some input formats for
     specifying graphs (Not implemented yet).

   - =pygraphviz= which  is also used to read  some graph formats (Not
     implemented yet).

   If any  optional requirement is missing, the  relative features are
   disactivated.
